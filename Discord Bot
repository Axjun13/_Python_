import discord
import asyncio
import requests
import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from discord.ext import commands
from dotenv import load_dotenv
import os

load_dotenv()

TOKEN = os.getenv('DISCORD_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

scheduler = AsyncIOScheduler()

reminders = {}

def get_gemini_response(message):
    url = "https://api.gemini.com/v1/chat"
    headers = {
        "Authorization": f"Bearer {GEMINI_API_KEY}",
    }
    response = requests.post(url, json={"message": message}, headers=headers)
    return response.json().get("response", "Sorry, I couldn't get a response.")

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}')
    scheduler.start()

@bot.event
async def on_member_join(member):
    channel = discord.utils.get(member.guild.text_channels, name="general")
    if channel:
        await channel.send(f"Welcome {member.mention}!")

@bot.command(name='chat', help='Talk to the bot using the Gemini API')
async def chat(ctx, *, message: str):
    response = get_gemini_response(message)
    await ctx.send(response)

@bot.command(name='poll', help='Create a poll')
async def poll(ctx, question: str, *options: str):
    if len(options) < 2:
        await ctx.send("Please provide at least two options.")
        return
    
    embed = discord.Embed(title=question, description="\n".join([f"{i+1}. {option}" for i, option in enumerate(options)]))
    poll_message = await ctx.send(embed=embed)
    
    for i in range(len(options)):
        await poll_message.add_reaction(f"{i+1}\u20e3")

@bot.command(name='remind', help="Set a reminder. Format: !remind [time] [message]")

async def remind(ctx, time: str, *, reminder_message: str):
    reminder_time = datetime.datetime.now() + datetime.timedelta(minutes=60)
    reminder_id = len(reminders) + 1
    reminders[reminder_id] = {
        "user": ctx.author,
        "time": reminder_time,
        "message": reminder_message,
        "task": None
    }
    
    await ctx.send(f"Reminder set for {reminder_time.strftime('%Y-%m-%d %H:%M:%S')}.")

def send_reminder():
        asyncio.run_coroutine_threadsafe(ctx.send(f"{ctx.author.mention}, your reminder: {reminder_message}"), bot.loop)
        del reminders[reminder_id]

    reminder_task = scheduler.add_job(send_reminder, 'date', run_date=reminder_time)
    reminders[reminder_id]["task"] = reminder_task

@bot.command(name='cancel_reminder', help="Cancel a reminder by providing its ID.")
async def cancel_reminder(ctx, reminder_id: int):
    reminder = reminders.get(reminder_id)
    if reminder:
        reminder["task"].remove()
        del reminders[reminder_id]
        await ctx.send(f"Reminder {reminder_id} has been canceled.")
    else:
        await ctx.send("Reminder not found.")

def auto_delete_reminders():
    current_time = datetime.datetime.now()
    expired_reminders = [reminder_id for reminder_id, reminder in reminders.items() if reminder["time"] <= current_time]
    
    for reminder_id in expired_reminders:
        del reminders[reminder_id]

scheduler.add_job(auto_delete_reminders, 'interval', seconds=60)

bot.run(TOKEN)
